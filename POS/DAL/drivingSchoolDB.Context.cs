//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class drivingSchoolDBEntities : DbContext
    {
        public drivingSchoolDBEntities()
            : base("name=drivingSchoolDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BookingType> BookingTypes { get; set; }
        public virtual DbSet<Colour> Colours { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<DayTimeSlot> DayTimeSlots { get; set; }
        public virtual DbSet<Fuel> Fuels { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceLineItem> InvoiceLineItems { get; set; }
        public virtual DbSet<LessonLog> LessonLogs { get; set; }
        public virtual DbSet<Maintenace> Maintenaces { get; set; }
        public virtual DbSet<MaintenaceType> MaintenaceTypes { get; set; }
        public virtual DbSet<Make> Makes { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<Operation> Operations { get; set; }
        public virtual DbSet<PaswordReset> PaswordResets { get; set; }
        public virtual DbSet<RoadTest_DayTimeSlot> RoadTest_DayTimeSlot { get; set; }
        public virtual DbSet<RoadTestTimeSlot> RoadTestTimeSlots { get; set; }
        public virtual DbSet<SaleItem> SaleItems { get; set; }
        public virtual DbSet<SaleItemType> SaleItemTypes { get; set; }
        public virtual DbSet<ScheduleInstructor> ScheduleInstructors { get; set; }
        public virtual DbSet<ScheduleItem> ScheduleItems { get; set; }
        public virtual DbSet<TotalLesson> TotalLessons { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VehicleFueling> VehicleFuelings { get; set; }
        public virtual DbSet<VehicleType> VehicleTypes { get; set; }
        public virtual DbSet<vwInstructorGeneratedIncome> vwInstructorGeneratedIncomes { get; set; }
        public virtual DbSet<vwInstuctorFuelCost> vwInstuctorFuelCosts { get; set; }
        public virtual DbSet<vwLessonsCompletedByInstuctor> vwLessonsCompletedByInstuctors { get; set; }
    
        public virtual ObjectResult<spCasUp_Result> spCasUp(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> user)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCasUp_Result>("spCasUp", startParameter, endParameter, userParameter);
        }
    
        public virtual ObjectResult<spDetailedSales_Result> spDetailedSales(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> user)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDetailedSales_Result>("spDetailedSales", startParameter, endParameter, userParameter);
        }
    
        public virtual ObjectResult<spFuelUsage_Result> spFuelUsage(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> instructorid, Nullable<int> vehicleid)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var instructoridParameter = instructorid.HasValue ?
                new ObjectParameter("instructorid", instructorid) :
                new ObjectParameter("instructorid", typeof(int));
    
            var vehicleidParameter = vehicleid.HasValue ?
                new ObjectParameter("vehicleid", vehicleid) :
                new ObjectParameter("vehicleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFuelUsage_Result>("spFuelUsage", startParameter, endParameter, instructoridParameter, vehicleidParameter);
        }
    
        public virtual ObjectResult<spInstructorFuelUsage_Result> spInstructorFuelUsage(Nullable<int> start, Nullable<int> end, Nullable<int> year, Nullable<int> instructorid)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var instructoridParameter = instructorid.HasValue ?
                new ObjectParameter("instructorid", instructorid) :
                new ObjectParameter("instructorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInstructorFuelUsage_Result>("spInstructorFuelUsage", startParameter, endParameter, yearParameter, instructoridParameter);
        }
    
        public virtual ObjectResult<spInstructorIncomeExpenditure_Result> spInstructorIncomeExpenditure(Nullable<int> instructorId, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var instructorIdParameter = instructorId.HasValue ?
                new ObjectParameter("instructorId", instructorId) :
                new ObjectParameter("instructorId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInstructorIncomeExpenditure_Result>("spInstructorIncomeExpenditure", instructorIdParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<spInstructorSchedule_Result> spInstructorSchedule(Nullable<int> id, Nullable<System.DateTime> date)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInstructorSchedule_Result>("spInstructorSchedule", idParameter, dateParameter);
        }
    }
}
